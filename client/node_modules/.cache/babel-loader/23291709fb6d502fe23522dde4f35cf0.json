{"ast":null,"code":"import _classCallCheck from \"/Users/amenaahmed/Desktop/BootCamp/ClickMeMemoryGame/ClickMeMemoryGame/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/amenaahmed/Desktop/BootCamp/ClickMeMemoryGame/ClickMeMemoryGame/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/amenaahmed/Desktop/BootCamp/ClickMeMemoryGame/ClickMeMemoryGame/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/amenaahmed/Desktop/BootCamp/ClickMeMemoryGame/ClickMeMemoryGame/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/amenaahmed/Desktop/BootCamp/ClickMeMemoryGame/ClickMeMemoryGame/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/amenaahmed/Desktop/BootCamp/ClickMeMemoryGame/ClickMeMemoryGame/client/src/components/GameContainer.js\";\nimport React, { Component } from \"react\";\nimport ImageButton from \"./ImageButton\";\nimport NavBar from \"./NavBar\";\nimport Score from \"./Score\";\nimport \"./style.css\";\n\nvar GameContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GameContainer, _Component);\n\n  function GameContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, GameContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(GameContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      counters: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      score: 0,\n      topscore: 0,\n      topScoresArray: [],\n      image: [\"./assets/images/blackwidow.jpg\", \"./assets/images/captainamerica.jpg\", \"./assets/images/gamora.jpg\", \"./assets/images/gamora2.jpg\", \"./assets/images/hulk.jpg\", \"./assets/images/ironman.jpg\", \"./assets/images/SpiderMan.jpg\", \"./assets/images/spiderman2.jpg\", \"./assets/images/thor.jpg\", \"./assets/images/vision.jpg\", \"./assets/images/ironman2.jpg\", \"./assets/images/hulk2.jpg\"]\n    };\n    return _this;\n  }\n\n  _createClass(GameContainer, [{\n    key: \"copyState\",\n    value: function copyState(newStateArray, item) {\n      newStateArray.push(item);\n    }\n  }, {\n    key: \"calculateTopScore\",\n    value: function calculateTopScore() {\n      var newTopScore = 0;\n      var currentTopScore = this.state.topscore;\n\n      if (currentTopScore <= this.state.score) {\n        newTopScore = this.state.score;\n        this.setState({\n          topscore: newTopScore\n        });\n      }\n\n      var refreshedCounterState = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      var tempScoresArray = [];\n      tempScoresArray = this.state.topScoresArray;\n      tempScoresArray.push(newTopScore);\n      console.log(tempScoresArray);\n      this.setState({\n        topScoresArray: tempScoresArray,\n        counters: refreshedCounterState,\n        score: 0\n      });\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(index) {\n      var _this2 = this;\n\n      var newCounterState = [];\n      this.state.counters.map(function (number) {\n        return _this2.copyState(newCounterState, number);\n      }); //create new array setting each element equal to zero--can create another function that loops through and adds the current value to newCounterState \n\n      console.log(\"Logging newCounterState in Game Container:\");\n      console.log(newCounterState);\n\n      if (newCounterState[index] === 0) {\n        var flashtext = function flashtext() {\n          document.getElementById(\"scoreDisplay\").style.color = 'green';\n        };\n\n        setInterval(function () {\n          flashtext('flashingtext3', 'green');\n        }, 500); //set an interval timer up to repeat the function\n\n        document.getElementById(\"\");\n        newCounterState[index] = this.state.counters[index] + 1; //incremented the count of the given index in param\n        // console.log(\"Logging newCounterState[index] in Game Container:\");\n        // console.log(newCounterState[index]);\n        // console.log(\"Logging index in Game Container:\");\n        // console.log(index);\n\n        var currentScore = this.state.score;\n        var newScore = currentScore + 1; // console.log(\"This is the new score:\");\n        // console.log(newScore);\n\n        this.shuffleComponents(this.createComponentArray());\n        this.setState({\n          counters: newCounterState,\n          score: newScore\n        });\n        console.log(\"Logging scoresArray\");\n        console.log(this.state.scoresArray);\n      } else {\n        console.log(\"Double click detected.\");\n        this.calculateTopScore();\n      }\n    }\n  }, {\n    key: \"shuffleComponents\",\n    value: function shuffleComponents(array) {\n      var currentIndex = array.length,\n          temporaryValue,\n          randomIndex; // While there remain elements to shuffle...\n\n      while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1; // And swap it with the current element.\n\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      return array;\n    }\n  }, {\n    key: \"createComponentArray\",\n    value: function createComponentArray() {\n      var _this3 = this;\n\n      // const newPicsArray = this.state.counters = \n      var pics = this.state.counters.map(function (value, index) {\n        return React.createElement(ImageButton, {\n          key: index,\n          handleClick: function handleClick() {\n            return _this3.handleClick(index);\n          } // counter={value}\n          ,\n          image: _this3.state.image[index],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        });\n      }); // console.log(\"logging pics array\");\n      // console.log(pics);\n\n      this.shuffleComponents(pics); // console.log(\"logging pics array\");\n      // console.log(pics);\n\n      return pics;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(NavBar, {\n        iconimage: \"./assets/images/avengers.png\",\n        title: \"THE AVENGERS CLICKS GAME\",\n        directions: \"Click on an Avenger to earn points. But don't click on any more than once!\",\n        score: this.state.score,\n        topscore: this.state.topscore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, this.createComponentArray())));\n    }\n  }]);\n\n  return GameContainer;\n}(Component);\n\n;\nexport default GameContainer;","map":{"version":3,"sources":["/Users/amenaahmed/Desktop/BootCamp/ClickMeMemoryGame/ClickMeMemoryGame/client/src/components/GameContainer.js"],"names":["React","Component","ImageButton","NavBar","Score","GameContainer","state","counters","score","topscore","topScoresArray","image","newStateArray","item","push","newTopScore","currentTopScore","setState","refreshedCounterState","tempScoresArray","console","log","index","newCounterState","map","number","copyState","flashtext","document","getElementById","style","color","setInterval","currentScore","newScore","shuffleComponents","createComponentArray","scoresArray","calculateTopScore","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","pics","value","handleClick"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ImageButton from \"./ImageButton\";\nimport NavBar from \"./NavBar\";\nimport Score from \"./Score\";\nimport \"./style.css\";\n\nclass GameContainer extends Component {\n    state = {\n        counters : [0,0,0,0,0,0,0,0,0,0,0,0],\n        score: 0,\n        topscore: 0,\n        topScoresArray:[],\n        image: [\"./assets/images/blackwidow.jpg\", \"./assets/images/captainamerica.jpg\", \"./assets/images/gamora.jpg\", \"./assets/images/gamora2.jpg\", \"./assets/images/hulk.jpg\", \"./assets/images/ironman.jpg\", \"./assets/images/SpiderMan.jpg\", \"./assets/images/spiderman2.jpg\", \"./assets/images/thor.jpg\", \"./assets/images/vision.jpg\", \"./assets/images/ironman2.jpg\", \"./assets/images/hulk2.jpg\"]\n\n    }\n\n    copyState(newStateArray, item){\n        newStateArray.push(item);\n    }\n\n    calculateTopScore(){\n        let newTopScore = 0;\n        let currentTopScore = this.state.topscore;\n\n        if (currentTopScore <= this.state.score){\n            newTopScore = this.state.score;\n        \n            this.setState({\n                topscore: newTopScore\n\n            })\n        } \n\n        let refreshedCounterState = [0,0,0,0,0,0,0,0,0,0,0,0];\n        let tempScoresArray = [];\n        tempScoresArray = this.state.topScoresArray;\n        tempScoresArray.push(newTopScore);\n        console.log(tempScoresArray);\n\n        this.setState({\n            topScoresArray: tempScoresArray,\n            counters: refreshedCounterState,\n            score: 0\n        })\n    }\n\n    handleClick(index){\n        let newCounterState = [];\n        this.state.counters.map((number) => (this.copyState(newCounterState, number))); //create new array setting each element equal to zero--can create another function that loops through and adds the current value to newCounterState \n        console.log(\"Logging newCounterState in Game Container:\");\n        console.log(newCounterState);\n\n        if(newCounterState[index]===0){\n            \n            function flashtext() {\n                    document.getElementById(\"scoreDisplay\").style.color = 'green';\n                    }\n\n                setInterval(function() {\n                    flashtext('flashingtext3','green');\n                }, 500 ); //set an interval timer up to repeat the function\n\n\n            document.getElementById(\"\")\n            newCounterState[index] = this.state.counters[index] + 1; //incremented the count of the given index in param\n            // console.log(\"Logging newCounterState[index] in Game Container:\");\n            // console.log(newCounterState[index]);\n            // console.log(\"Logging index in Game Container:\");\n            // console.log(index);\n            let currentScore = this.state.score;\n            let newScore = currentScore+1;\n            // console.log(\"This is the new score:\");\n            // console.log(newScore);\n            this.shuffleComponents(this.createComponentArray());\n\n            this.setState(\n                {\n                    counters : newCounterState,\n                    score: newScore\n                    \n                })\n            console.log(\"Logging scoresArray\");\n            console.log(this.state.scoresArray);\n           \n        }else{\n            console.log(\"Double click detected.\")\n            this.calculateTopScore();\n        }\n    }\n\n    shuffleComponents(array){\n    \n        let currentIndex = array.length, temporaryValue, randomIndex;\n\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n        }\n        return array;\n    } \n\n    createComponentArray() {\n        // const newPicsArray = this.state.counters = \n        const pics = this.state.counters.map((value, index) => (\n             <ImageButton \n                key={index}\n                handleClick={() => this.handleClick(index)}\n                // counter={value}\n                image={this.state.image[index]}\n            />   \n        ))\n        // console.log(\"logging pics array\");\n        // console.log(pics);\n        this.shuffleComponents(pics)\n        // console.log(\"logging pics array\");\n        // console.log(pics);\n\n            return pics;\n    }\n\n    render() {\n        return(\n        <div>\n            <NavBar\n            iconimage=\"./assets/images/avengers.png\"\n            title=\"THE AVENGERS CLICKS GAME\"\n            directions={\"Click on an Avenger to earn points. But don't click on any more than once!\"}\n            score={this.state.score}\n            topscore={this.state.topscore}\n            />\n            \n            <div className=\"container\">\n                <div className=\"row\">\n                    {this.createComponentArray()}\n                </div>\n            </div>\n        </div>\n            \n        );\n}\n};\nexport default GameContainer;"]},"metadata":{},"sourceType":"module"}