{"ast":null,"code":"import _classCallCheck from \"/Users/amenaahmed/Desktop/BootCamp/ClickMeMemoryGame/ClickMeMemoryGame/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/amenaahmed/Desktop/BootCamp/ClickMeMemoryGame/ClickMeMemoryGame/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/amenaahmed/Desktop/BootCamp/ClickMeMemoryGame/ClickMeMemoryGame/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/amenaahmed/Desktop/BootCamp/ClickMeMemoryGame/ClickMeMemoryGame/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/amenaahmed/Desktop/BootCamp/ClickMeMemoryGame/ClickMeMemoryGame/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/amenaahmed/Desktop/BootCamp/ClickMeMemoryGame/ClickMeMemoryGame/client/src/components/GameContainer.js\";\nimport React, { Component } from \"react\";\nimport ImageButton from \"./ImageButton\";\n\nvar GameContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GameContainer, _Component);\n\n  function GameContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, GameContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(GameContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      counters: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      score: 0,\n      topscore: 0,\n      image: [\"./assets/images/kawaii.jpg\", \"./assets/images/cat.jpg\", \"./assets/images/cutedog.jpg\", \"./assets/images/deer.jpg\", \"./assets/images/dog.jpg\", \"./assets/images/fox.jpg\", \"./assets/images/goat.jpg\", \"./assets/images/koala.jpg\", \"./assets/images/panda.jpg\", \"./assets/images/pandaheart.jpg\", \"./assets/images/puppy.jpg\", \"./assets/images/sheep.jpg\"]\n    };\n    return _this;\n  }\n\n  _createClass(GameContainer, [{\n    key: \"copyState\",\n    value: function copyState(newStateArray, item) {\n      newStateArray.push(item);\n    }\n  }, {\n    key: \"calculateTopScore\",\n    value: function calculateTopScore() {\n      var newTopScore = 0;\n      var currentTopScore = this.state.topscore;\n\n      if (currentTopScore <= this.state.score) {\n        newTopScore = this.state.score;\n        var refreshedCounterState = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        this.setState({\n          topscore: newTopScore,\n          score: 0,\n          counters: refreshedCounterState\n        });\n      }\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(index) {\n      var _this2 = this;\n\n      var newCounterState = [];\n      this.state.counters.map(function (number) {\n        return _this2.copyState(newCounterState, number);\n      }); //create new array setting each element equal to zero--can create another function that loops through and adds the current value to newCounterState \n\n      console.log(\"Logging newCounterState in Game Container:\");\n      console.log(newCounterState);\n\n      if (newCounterState[index] === 0) {\n        newCounterState[index] = this.state.counters[index] + 1; //incremented the count of the given index in param\n        // console.log(\"Logging newCounterState[index] in Game Container:\");\n        // console.log(newCounterState[index]);\n        // console.log(\"Logging index in Game Container:\");\n        // console.log(index);\n\n        var currentScore = this.state.score;\n        var newScore = currentScore + 1; // console.log(\"This is the new score:\");\n        // console.log(newScore);\n\n        this.shuffleComponents(this.createComponentArray()); // let imageStateCopy = this.state.image;\n        //     console.log(\"Image State Copy\");\n        //     console.log(imageStateCopy);\n        // let shuffledArray = this.shuffleImages(imageStateCopy);\n\n        this.setState({\n          counters: newCounterState,\n          score: newScore // image: shuffledArray\n\n        });\n        console.log(\"Logging image state\");\n        console.log(this.state.image);\n      } else {\n        console.log(\"Double click detected.\");\n        this.calculateTopScore();\n      }\n    }\n  }, {\n    key: \"shuffleComponents\",\n    value: function shuffleComponents(array) {\n      var currentIndex = array.length,\n          temporaryValue,\n          randomIndex; // While there remain elements to shuffle...\n\n      while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1; // And swap it with the current element.\n\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      return array;\n    }\n  }, {\n    key: \"createComponentArray\",\n    value: function createComponentArray() {\n      var _this3 = this;\n\n      // const newPicsArray = this.state.counters = \n      var pics = this.state.counters.map(function (value, index) {\n        return React.createElement(ImageButton, {\n          key: index,\n          handleClick: function handleClick() {\n            return _this3.handleClick(index);\n          },\n          counter: value,\n          image: _this3.state.image[index],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        });\n      });\n      console.log(\"logging pics array\");\n      console.log(pics);\n      this.shuffleComponents(pics);\n      console.log(\"logging pics array\");\n      console.log(pics);\n      return pics;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"Score: \", this.state.score), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Top Score: \", this.state.topscore), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, this.createComponentArray()));\n    }\n  }]);\n\n  return GameContainer;\n}(Component);\n\n;\nexport default GameContainer;","map":{"version":3,"sources":["/Users/amenaahmed/Desktop/BootCamp/ClickMeMemoryGame/ClickMeMemoryGame/client/src/components/GameContainer.js"],"names":["React","Component","ImageButton","GameContainer","state","counters","score","topscore","image","newStateArray","item","push","newTopScore","currentTopScore","refreshedCounterState","setState","index","newCounterState","map","number","copyState","console","log","currentScore","newScore","shuffleComponents","createComponentArray","calculateTopScore","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","pics","value","handleClick"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ImageButton from \"./ImageButton\";\n\nclass GameContainer extends Component {\n    state = {\n        counters : [0,0,0,0,0,0,0,0,0,0,0,0],\n        score: 0,\n        topscore: 0,\n        image: [\"./assets/images/kawaii.jpg\", \"./assets/images/cat.jpg\", \"./assets/images/cutedog.jpg\", \"./assets/images/deer.jpg\", \"./assets/images/dog.jpg\", \"./assets/images/fox.jpg\", \"./assets/images/goat.jpg\", \"./assets/images/koala.jpg\", \"./assets/images/panda.jpg\", \"./assets/images/pandaheart.jpg\", \"./assets/images/puppy.jpg\", \"./assets/images/sheep.jpg\"]\n\n    }\n\n    copyState(newStateArray, item){\n        newStateArray.push(item);\n     }\n\n     calculateTopScore(){\n        let newTopScore = 0;\n        let currentTopScore = this.state.topscore;\n        if (currentTopScore<=this.state.score){\n            newTopScore = this.state.score;\n            let refreshedCounterState = [0,0,0,0,0,0,0,0,0,0,0,0];\n            this.setState({\n                topscore: newTopScore,\n                score: 0,\n                counters: refreshedCounterState\n            })\n        }\n    }\n\n    handleClick(index){\n        let newCounterState = [];\n        this.state.counters.map((number) => (this.copyState(newCounterState, number))); //create new array setting each element equal to zero--can create another function that loops through and adds the current value to newCounterState \n        console.log(\"Logging newCounterState in Game Container:\");\n        console.log(newCounterState);\n\n        if(newCounterState[index]===0){\n    \n            newCounterState[index] = this.state.counters[index] + 1; //incremented the count of the given index in param\n            // console.log(\"Logging newCounterState[index] in Game Container:\");\n            // console.log(newCounterState[index]);\n            // console.log(\"Logging index in Game Container:\");\n            // console.log(index);\n            let currentScore = this.state.score;\n            let newScore = currentScore+1;\n            // console.log(\"This is the new score:\");\n            // console.log(newScore);\n            this.shuffleComponents(this.createComponentArray());\n\n\n            // let imageStateCopy = this.state.image;\n            //     console.log(\"Image State Copy\");\n            //     console.log(imageStateCopy);\n        \n            // let shuffledArray = this.shuffleImages(imageStateCopy);\n\n\n            this.setState(\n                {\n                    counters : newCounterState,\n                    score: newScore,\n                    // image: shuffledArray\n                })\n            \n                console.log(\"Logging image state\");\n                console.log(this.state.image);\n           \n        }else{\n            console.log(\"Double click detected.\")\n            this.calculateTopScore();\n        }\n    }\n\n    shuffleComponents(array){\n    \n        let currentIndex = array.length, temporaryValue, randomIndex;\n\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n        }\n        return array;\n    } \n\n    createComponentArray() {\n        // const newPicsArray = this.state.counters = \n        const pics = this.state.counters.map((value, index) => (\n             <ImageButton \n                key={index}\n                handleClick={() => this.handleClick(index)}\n                counter={value}\n                image={this.state.image[index]}\n            />   \n        ))\n        console.log(\"logging pics array\");\n        console.log(pics);\n        this.shuffleComponents(pics)\n        console.log(\"logging pics array\");\n        console.log(pics);\n\n            return pics;\n    }\n\n    render() {\n        return(\n        <div>\n            <p>Score: {this.state.score}</p>\n            <p>Top Score: {this.state.topscore}</p>\n            <div className=\"row\">\n                {this.createComponentArray()}\n            </div>\n        </div>\n        );\n}\n};\nexport default GameContainer;"]},"metadata":{},"sourceType":"module"}